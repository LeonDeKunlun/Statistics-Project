---
title: Short-term Gas Demand Forecasting
author:
  name:
    given: Keyang
    family: Liang
    literal: Keyang Liang 2989789L
format:
  pdf:
    output-ext: pdf
toc: true
toc-depth: 1
toc-title: Contents
number-sections: true
fontsize: 12pt
linestretch: 1
colorlinks: false
execute:
  echo: false
  warning: false
fig-align: center
fig-pos: H
fig-width: 3.5433
fig-height: 2.1899
fig-dpi: 360
df-print: kable
bibliography: references.bib
csl: harvard-university-of-leeds.csl
output-file: Project68_2
editor_options:
  chunk_output_type: console
---

```{r, results='hide'}
# load packages
library(tidyverse)
library(magrittr)
library(cowplot)
library(mgcv)
```

```{r, results='hide'}
set.seed(42)

# set locale
sys_locale <- "en_GB.utf8"
Sys.setlocale(locale = sys_locale)

options(
  lubridate.week.start = 1)
weekends <-
  lubridate::make_date(day = 3:4) %>%
  lubridate::wday(label = TRUE)

# set plot theme
size_param <- ggplot2::.stroke / ggplot2::.pt
ggplot2::theme_set(
  new =
    ggplot2::theme_minimal(
      base_size = 12,
      base_line_size = 0.5 * size_param,
      base_rect_size = 0.5 * size_param) +
    ggplot2::theme(
      axis.line = ggplot2::theme_classic()$axis.line))
purrr::iwalk(
  list(
    "point" = list(size = 0.5 * size_param, stroke = 0.25),
    "line" = list(linewidth = 0.25 * size_param),
    "text" = list(size = 12 / ggplot2::.pt, lineheight = 1),
    "density" = list(linewidth = 0.5 * size_param),
    "smooth" = list(linewidth = 0.25 * size_param)),
  \(x, idx) ggplot2::update_geom_defaults(geom = idx, new = x))

options(
  digits = 4)
```

```{r}
# read the data
gas_demand_raw <-
  utils::read.csv(
    file = "Scotland_Gas_Demand_and_CWV_01-01-2021_31-12-2024.csv",
    check.names = FALSE)
```

```{r}
gas_demand <-
  gas_demand_raw %>%
  dplyr::mutate(
    Date = `Applicable For` %>% as.Date(format = "%d/%m/%Y"),
    DataItem =
      `Data Item` %>%
      dplyr::case_match(
        "Demand Actual, LDZ (SC), D+6" ~ "GasDemand",
        "Composite Weather Variable, Actual, LDZ(SC), D+1" ~
          "CWV"),
    QualityIndicator =
      `Quality Indicator` %>%
      dplyr::case_match(
        "A" ~ "Amended",
        "L" ~ "Late",
        .default = `Quality Indicator`) %>%
      factor(levels = c("", "Late", "Amended"))) %>%
  dplyr::select(Date, DataItem, Value, QualityIndicator)
```

```{r}
# fetch public holiday data
holidays <-
  jsonlite::fromJSON(
    txt = "https://www.gov.uk/bank-holidays.json"
  )$scotland$events %>%
  dplyr::mutate(
    Date = date %>% as.Date(format = "%Y-%m-%d"),
    Holiday = title %>% stringr::str_remove(pattern = " \\(.*\\)"),
    .keep = "none")
```

```{r}
gas_demand_wide <-
  gas_demand %>%
  # delete outliers
  dplyr::mutate(
    Value =
      dplyr::case_when(
        DataItem == "GasDemand" & QualityIndicator == "Amended" ~ NA,
        DataItem == "GasDemand" & Value == 5.4 ~ NA,
        .default = Value)) %>%
  # transform the data frame
  tidyr::pivot_wider(
    id_cols = Date,
    names_from = DataItem,
    values_from = Value) %>%
  # order the data by Date
  dplyr::arrange(Date) %>%
  # add day of the week
  dplyr::mutate(
    DayOfTheWeek = Date %>% lubridate::wday(label = TRUE)) %>%
  # add public holiday data
  dplyr::left_join(
    holidays,
    by = dplyr::join_by(Date),
    relationship = "one-to-one") %>%
  dplyr::mutate(
    Holiday =
      dplyr::case_when(
        !is.na(Holiday) ~ "Holiday",
        DayOfTheWeek %in% weekends ~ "Holiday",
        .default = "None") %>%
      factor(levels = c("None", "Holiday")))
```

```{r}
# train test split
gas_demand_train <-
  gas_demand_wide %>%
  dplyr::filter(Date < lubridate::make_date(2024, 1, 1))
gas_demand_test <- gas_demand_wide
```

```{r}
freq <- 2 * pi / 365

gas_demand_train %<>%
  dplyr::mutate(
    Cos = cos(freq * unclass(Date)),
    Sin = sin(freq * unclass(Date)))

model_trig <-
  stats::lm(
    formula = log(GasDemand) ~ Cos + Sin,
    data = gas_demand_train)

phase <- atan2(model_trig$coefficients[["Cos"]], model_trig$coefficients[["Sin"]]) / freq
phase %<>% round()

gas_demand_train %<>%
  dplyr::mutate(
    Trig = sin(freq * (unclass(Date) + phase)),
    CWV = CWV %>% dplyr::lag(n = 7))
gas_demand_test %<>%
  dplyr::mutate(
    Trig = sin(freq * (unclass(Date) + phase)),
    CWV = CWV %>% dplyr::lag(n = 7))
```

```{r}
model_gam <-
  mgcv::gam(
    formula =
      log(GasDemand) ~ s(unclass(Date)) + s(Trig) + s(CWV) + Holiday,
    data = gas_demand_train)

gas_demand_gam_fitted <-
  gas_demand_train %>%
  dplyr::mutate(
    FittedValue =
      mgcv::predict.gam(
        model_gam,
        newdata = gas_demand_train,
        type = "response"),
    Residual = log(GasDemand) - FittedValue)
```

```{r}
model_arima <-
  stats::arima(
    gas_demand_gam_fitted$Residual,
    order = c(2, 0, 0),
    include.mean = FALSE)
```

```{r}
gas_demand_test %<>%
  dplyr::mutate(
    FittedValue =
      mgcv::predict.gam(
        model_gam,
        newdata = gas_demand_test,
        type = "response"),
    Residual = log(GasDemand) - FittedValue)
```

```{r}
gas_demand_test %<>%
  dplyr::mutate(
    "-1" := Residual %>% dplyr::lag(n = 1),
    "0" := Residual)
for (i in 1:7) {
  alpha1 <- model_arima$coef[["ar1"]]
  alpha2 <- model_arima$coef[["ar2"]]
  
  gas_demand_test[[as.character(i)]] <-
    alpha1 * gas_demand_test[[as.character(i - 1)]] +
    alpha2 * gas_demand_test[[as.character(i - 2)]]
}
for (i in 1:7) {
  gas_demand_test[[as.character(i)]] <-
    gas_demand_test[[as.character(i)]] %>% dplyr::lag(i) +
    gas_demand_test[["FittedValue"]]
}
gas_demand_test %<>%
  dplyr::select(!c("-1", "0"))
```

```{r}
N <- 10000
alp = 0.95
prediction_intervals <- matrix(nrow = 7, ncol = 2)

gas_demand_bootstrap <-
  gas_demand_test %>%
  dplyr::filter(Date < lubridate::make_date(2024, 1, 1)) %>%
  stats::na.omit()

for (i in 1:7) {
  sample(
    gas_demand_bootstrap$GasDemand %>% log() - gas_demand_bootstrap[[as.character(i)]],
    size = N,
    replace = TRUE) -> x
  prediction_intervals[i, ] <-
    stats::quantile(
      x,
      probs = c((1 - alp) / 2, (1 + alp) / 2))
}
```

```{r}
gas_demand_test %<>%
  dplyr::filter(Date >= lubridate::make_date(2024, 1, 1))
```

```{r}
quality_colour <- c("grey", "Amended" = "red", "Late" = "orange")
weekday_colour <-
  c(scales::pal_hue(h = c(15, 45))(5), scales::pal_hue(h = c(195, 225))(2))
names(weekday_colour) <- levels(weekends)

seperate_legend <- function(plot) {
  legend <- cowplot::get_legend(plot)
  cowplot::plot_grid(
    plot + ggplot2::theme(legend.position = "none"),
    legend,
    ncol = 2,
    rel_widths = c(1, 0.3))
}

plot_item_vs_date <- function(item) {
  plot <-
    gas_demand %>%
    dplyr::filter(DataItem == item) %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = Date,
        y = Value,
        colour = QualityIndicator)) +
    ggplot2::scale_colour_manual(values = quality_colour) +
    ggplot2::geom_point() +
    ggplot2::labs(
      y = item,
      colour = "")
  seperate_legend(plot)
}

plot_variable <- function(variable) {
  plot1 <-
    gas_demand_wide %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = Date,
        y = {{ variable }})) +
    ggplot2::geom_line()
  plot2 <-
    gas_demand_wide %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = {{ variable }})) +
    ggplot2::geom_density()
  cowplot::plot_grid(
    plot1,
    plot2,
    align = "h",
    ncol = 2
  )
}

plot_acfs <- function(x) {
  ci <- stats::qnorm((1 + 0.95) / 2) / sqrt(length(x))
  plot_acf <- function(FUN) {
    FUN(x, plot = FALSE, na.action = stats::na.pass) %>%
      with(data.frame(lag, acf)) %>%
      ggplot2::ggplot(
        mapping = ggplot2::aes(
          x = lag,
          xend = lag,
          y = acf,
          yend = 0)) +
      ggplot2::geom_hline(
        yintercept = 0) +
      ggplot2::geom_hline(
        yintercept = ci,
        colour = "blue",
        linetype = "dashed") +
      ggplot2::geom_hline(
        yintercept = -ci,
        colour = "blue",
        linetype = "dashed") +
      ggplot2::geom_segment()
  }
  plot1 <-
    plot_acf(stats::acf) +
    ggplot2::labs(
      y = "ACF")
  plot2 <-
    plot_acf(stats::pacf) +
    ggplot2::coord_cartesian(
      xlim = c(0, NA)) +
    ggplot2::labs(
      y = "Partial ACF")
  cowplot::plot_grid(
    plot1,
    plot2,
    align = "h",
    ncol = 2
  )
}

plot_predict <- function(i) {
  gas_demand_test %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = Date)) +
    ggplot2::geom_line(
      mapping = ggplot2::aes(
        y = log(GasDemand))) +
    ggplot2::geom_point(
      mapping = ggplot2::aes(
        y = .data[[as.character(i)]]),
      colour = "blue") +
    ggplot2::labs(
      y = "log(GasDemand)")
}

plot_interval <- function(i) {
  gas_demand_test %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = Date)) +
    ggplot2::geom_ribbon(
      mapping = ggplot2::aes(
        ymin = .data[[as.character(i)]] + prediction_intervals[i, 1],
        ymax = .data[[as.character(i)]] + prediction_intervals[i, 2]),
      alpha = 0.382,
      fill = "blue") +
    ggplot2::geom_line(
      mapping = ggplot2::aes(
        y = log(GasDemand))) +
    ggplot2::labs(
      x = paste(i, "Day(s) Ahead"),
      y = "log(GasDemand)")
}
```

\newpage

# Introduction {#sec-intro}

Natural gas is an important energy resource, which is used across all regions and in various sectors, including industry and electricity generation [@iea2025review].
To satisfy its demands, a sufficient and economic supply is important, and requires accurate forecasts.

Multiple factors can influence gas demand and forecast accuracy, including temperature, wind speed, seasonal activities, and special events.

This study aims to forecast natural gas demands in Scotland from several days ahead, evaluate prediction intervals, and furthermore determine what factors affect forecast uncertainty.

# Data and Exploratory Analysis {#sec-eda}

## Data Source

Historic natural gas demand data and weather data for Scotland from 2021 to 2024 were retrieved from National Gas, which is the owner of the National Transmission System that transports natural gas across Great Britain [@nationalgasdata].
Bank holiday data were taken from UK government API [@ukholiday].

Data from National Gas are partially shown in @tbl-data-example.
Column **Applicable For** refers to the date to which the observation applies.
Column **Quality Indicator** indicates quality of the observation, where value *A* means amended, and value *L* means late.

```{r}
#| label: tbl-data-example
#| tab-cap: Part of the Data

gas_demand_raw %>%
  dplyr::select(`Applicable For`:Value, `Quality Indicator`) %>%
  utils::head(n = 6)
```

Data item *Demand Actual, LDZ (SC), D+6* refers to natural gas demand for the Local Distribution Zone of Scotland for the given date, which is measured in mega standard cubed metre (MSm^3^).

@fig-demand-raw plots natural gas demand against date, and highlights observations with quality indicator labels.
It can be observed that the data exhibit annual seasonality, and several outliers locate out of the pattern.
To be specific, late data items with value $5.4$, and amended data items were considered as outliers, and would be removed in further analysis.

```{r}
#| label: fig-demand-raw
#| fig-cap: Scatter Plot of Gas Demand against Date
#| fig-width: 4.6063

plot_item_vs_date("GasDemand")
```

Data item *Composite Weather Variable, Actual, LDZ(SC), D+1* refers to composite weather variable (CWV) for the Local Distribution Zone of Scotland for the given date, which is calculated from temperature and wind speed.

@fig-cwv-raw plots composite weather variable against date.
No obvious outliers are observed through the figure.

```{r}
#| label: fig-cwv-raw
#| fig-cap: Scatter Plot of Composite Weather Variable against Date
#| fig-width: 4.6063

plot_item_vs_date("CWV")
```

## Univariate Analysis

After removing the outliers, further exploratory analysis were applied to describe the data.

@fig-demand shows the trends and distribution of natural gas demand.
Overall, there is an decreasing trend over time.
Also, an annual seasonality exists in the data, such that gas demand increases from August to January, and decreases from February to July.

Furthermore, it can be observed that the variance in gas demand turns large in winter days, and turns small in summer days.
As for the density plot, the distribution is bimodal and right-skewed, with the right mode smaller than the left mode.
In summary, these discoveries indicate that a transformation to the data is plausible, in order to make the distribution better for modelling.

```{r}
#| label: fig-demand
#| fig-cap: Plots of Gas Demand
#| fig-width: 7.0866

plot_variable(GasDemand)
```

@fig-log-demand describes the log-transformed natural gas demand data.
The variance turns stable, and the distribution is less skewed.

```{r}
#| label: fig-log-demand
#| fig-cap: Plots of log-transformed Gas Demand
#| fig-width: 7.0866

plot_variable(log(GasDemand))
```

As for the composite weather variable, @fig-cwv shows its seasonality and distribution.
It increases from February to July and decreases from August to January annually, and has larger variance in winter days and smaller variance in summer days.
The distribution is bimodal and left-skewed, with the left mode smaller than the right mode.

```{r}
#| label: fig-cwv
#| fig-cap: Plots of Composite Weather Variable
#| fig-width: 7.0866

plot_variable(CWV)
```

## Multivariate Analysis

After univariate analysis, relationship between variables were evaluated.

@fig-demand-cwv shows a strong linear relationship between natural gas demand and composite weather variable.
Also, it can be observed that when CWV becomes smaller, the variance in natural gas demand becomes larger.

```{r}
#| label: fig-demand-cwv
#| fig-cap: Scatter Plot of Gas Demand against Composite Weather Variable

gas_demand_wide %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = CWV,
      y = GasDemand)) +
  ggplot2::geom_point()
```

Since this study aims to give prediction of natural gas demand several days ahead, the weather data on the date in question would not be available when making prediction.
Therefore, evaluating the relationship between composite weather variable several days before and natural gas demand would be an approach.

@fig-demand-lag-cwv illustrates the relationship between CWV several days ahead and natural gas demand.
There exists a negative linear relationship through all the plots.
However, as the date gap becomes larger, the variance in natural gas demand becomes larger.

```{r}
#| label: fig-demand-lag-cwv
#| fig-cap: Plots of Gas Demand against lagged Composite Weather Variable
#| fig-width: 7.0866
#| fig-height: 6.5697

lapply(
  0:5,
  FUN = function(i) gas_demand_wide %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = CWV %>% dplyr::lag(n = i),
        y = GasDemand)) +
    ggplot2::geom_point() +
    ggplot2::labs(
      x = paste("CWV", "lag", i))) -> ps
cowplot::plot_grid(
  plotlist = ps,
  ncol = 2,
  align = "hv")
```

Holiday is also an important factor affecting natural gas demand.
@fig-demand-weekday shows the differences in natural gas demand levels between each day of the week.
The gas demand level in weekends are lower than that in weekdays.
Therefore, it is plausible to combine weekends and weekdays respectively, and transform day of the week into a binary variable.
In further analysis, weekends and bank holidays would be categorized as holidays, with the remaining categorized as non-holidays.

```{r}
#| label: fig-demand-weekday
#| fig-cap: Plot of Gas Demand against Date by Week Day
#| fig-width: 4.6063

gas_demand_wide %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = Date,
      y = log(GasDemand),
      colour = DayOfTheWeek)) +
  ggplot2::scale_colour_manual(values = weekday_colour) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth(
    method = "loess",
    se = FALSE,
    span = 0.25) +
  ggplot2::labs(
    colour = "") -> p
seperate_legend(p)
```

The interaction of composite weather variable and holiday was also considered.
@fig-demand-cwv-holiday shows that the linear effect of CWV in holidays is smaller than that in non-holidays.

```{r}
#| label: fig-demand-cwv-holiday
#| fig-cap: Scatter Plot of Gas Demand against Composite Weather Variable by Holiday
#| fig-width: 4.6063

gas_demand_wide %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = CWV,
      y = GasDemand,
      colour = Holiday)) +
  ggplot2::geom_point() +
  ggplot2::labs(
    colour = "") -> p
seperate_legend(p)
```

# Methodologies {#sec-method}

Generalised Additive Models (GAM) and Autoregressive Integrated Moving Average (ARIMA) models were used in this study.

GAM extends the generalised linear models, by replacing the linear term by an additive smooth function [@hastie1986].
It provides more flexibility for capturing non-linear relationship between explanatory variables and response variable.
In the case of this study, it helps identifying the non-linear effects of date on the log-transformed natural gas demand.

Model assumption checks followed model fitting, where residual independance, zero-mean and constant variance assumptions were checked.

ARIMA model is a time series model that can model the trend, seasonal variation, and correlation simultaneously [@uog2022apm].
It is a composition of autoregressive process, moving average process, and differencing, hence it can better fit the data with more flexibility.
By checking autocorrelation plots of the residuals, the parameters used in ARIMA model were determined.

Bootstrap methods were applied in calculating the prediction intervals [@hyndman2021].

# Formal Analysis {#sec-model}

## Model Fitting and Model Checking {#sec-model-fit}

As is shown in @sec-eda, there exists a seasonal trend in log-transformed natural gas demand.
The trigonometric function $\sin(\frac{2 \pi}{365} (x + \phi))$ would be used in modelling, where $x$ is the date index, and $\phi$ is the phase shift.

Since
$$
\sin(\frac{2 \pi}{365} (x + \phi)) = \sin \frac{2 \pi}{365} \phi \cdot \cos \frac{2 \pi}{365} x + \cos \frac{2 \pi}{365} \phi \cdot \sin \frac{2 \pi}{365} x,
$$
the phase shift can be approximately determined by fitting the linear model
$$
y_i = \beta_0 + \beta_1 \cos \frac{2 \pi}{365} x_i + \beta_2 \sin \frac{2 \pi}{365} x_i + \varepsilon_i,
$$ {#eq-lm-trig}
where\newline
$y_i$ is log-transformed natural gas demand,\newline
$x_i$ is date index,\newline
$\varepsilon \sim \operatorname{N}(0, \sigma^2)$ independently.

@fig-lm-trig shows the results of @eq-lm-trig.
The estimated coefficients are $\hat{\beta_1} =$ `r model_trig$coefficients[["Cos"]] %>% round(3)` and $\hat{\beta_2} =$ `r model_trig$coefficients[["Sin"]] %>% round(3)`.
Therefore, the phase shift $\phi$ is `r phase` days to the left of 2021 Jan 1^st^.

```{r}
#| label: fig-lm-trig
#| fig-cap: Scatter Plot of Fitted Values in @eq-lm-trig

gas_demand_train %>%
  dplyr::mutate(
    FittedValue =
      stats::predict.lm(
        model_trig,
        newdata = gas_demand_train)) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = Date,
      y = log(GasDemand))) +
  ggplot2::geom_point() +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      y = FittedValue),
    colour = "red")
```

The generalised additive model
$$
g(\operatorname{E}[y_i]) = \beta_0 + f_1(x_{1i}) + f_2(x_{2i}) + f_3(x_{3i}) + \beta_4 x_{4i}
$$ {#eq-gam}
was applied, where\newline
$g$ is the identity link function,\newline
$y_i$ is log-transformed natural gas demand,\newline
$\beta_i$'s are intercepts,\newline
$f_i$'s are smooth functions,\newline
$x_{1i}$ is date index,\newline
$x_{2i}$ is trigonometric function $\sin(\frac{2 \pi}{365} (x_{1i} + \phi))$ such that $\phi = $ `r phase`,\newline
$x_{3i}$ is lag 7 composite weather variable,\newline
$x_{4i}$ is indicator function of holiday.

After fitting @eq-gam, model assumption checks were carried out.

@fig-gam-residual-fitted shows that residuals are evenly scattered around zero, and have constant variance across all levels of the fitted values.

```{r}
lim <-
  gas_demand_gam_fitted$Residual %>%
  abs() %>%
  max(na.rm = TRUE)
```

```{r}
#| label: fig-gam-residual-fitted
#| fig-cap: Scatter Plot of Residual against Fitted Value in @eq-gam

gas_demand_gam_fitted %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = FittedValue,
      y = Residual)) +
  ggplot2::coord_cartesian(
    ylim = c(-lim, lim)) +
  ggplot2::geom_hline(
    yintercept = 0,
    colour = "grey") +
  ggplot2::geom_point()
```

In @fig-gam-qq, the points fall closely along the diagonal line.
Therefore, it is safe to assume that the residuals are normally distributed.

```{r}
#| label: fig-gam-qq
#| fig-cap: Quantile-Quantile Plot of Residual in @eq-gam
#| fig-height: 3.5433

gas_demand_gam_fitted %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      sample = Residual)) +
  ggplot2::coord_cartesian(
    ylim = c(-lim, lim)) +
  ggplot2::geom_qq_line(
    colour = "grey") +
  ggplot2::geom_qq()
```

@fig-gam-acf displays the autocorrelation within the residuals.
The ACF declines gradually, and the PACF is significantly large until lag $2$.
These results indicate the residuals are correlated, and potentially follow an autoregressive process of order 2.

```{r}
#| label: fig-gam-acf
#| fig-cap: Autocorrelation Plots of Residual in @eq-gam
#| fig-width: 7.0866

plot_acfs(gas_demand_gam_fitted$Residual)
```

According to above discussion, the AR(2) model
$$
\varepsilon_t - \alpha_1 \varepsilon_{t-1} - \alpha_2 \varepsilon_{t-2} = Z_t,
$$ {#eq-arima}
is applied to the residuals of @eq-gam, where\newline
$\varepsilon_t$ is the residual at date index $t$,\newline
$\alpha_i$'s are coefficients,\newline
$Z_t \sim \operatorname{N}(0, \sigma^2)$ independently.

The model results of @eq-arima are $\hat{\alpha}_1 =$ `r model_arima$coef[["ar1"]] %>% round(3)` and $\hat{\alpha}_2 =$ `r model_arima$coef[["ar2"]] %>% round(3)`.

The fitness of the model is evaluated by @fig-gam-arima.
Overall, the ACF and PACF are small, although some of them slightly exceed the confidence interval.
This indicates that the residuals are uncorrelated.

```{r}
#| label: fig-gam-arima
#| fig-cap: Autocorrelation Plots of Residual in @eq-arima
#| fig-width: 7.0866

plot_acfs(residuals(model_arima))
```

## Point Estimates and Prediction Intervals

The models which are used to give prediction of natural gas demand, are specified in @sec-model-fit.

To forecast natural gas demand $h$ day ahead at date $t$, where $h = 1, \dots, 7$, the point estimate can be calculated by equation
$$
g(\hat{y}_{t+h}) = \hat{\beta_0} + \sum_{j=1}^{3} \hat{f_j}(x_{j, t+h}) + \hat{\beta_4} x_{4, t+h} + \hat{\varepsilon}_{t+h},
$$
where\newline
$g$ is the identity link function,\newline
$\hat{\beta_i}$'s and $\hat{f_j}$'s are the results of @eq-gam, and
$$
\hat{\varepsilon}_{t+k} = \hat{\alpha_1} \hat{\varepsilon}_{t+k-1} + \hat{\alpha_2} \hat{\varepsilon}_{t+k-2}, ~ k = 1, \dots, h,
$$
and
$$
\hat{\varepsilon}_{t+k} = g(y_{t+k}) - (\hat{\beta_0} + \sum_{j=1}^{3} \hat{f_j}(x_{j, t+k}) + \hat{\beta_4} x_{4, t+k}), ~ k \le 0,
$$
where\newline
$\hat{\alpha_i}$'s are the results of @eq-arima.

@fig-pred-1 shows the predicted log-transformed natural gas demand $1$ day ahead on the test set.

```{r}
#| label: fig-pred-1
#| fig-cap: Plot of Predicted Value at $h = 1$ over True Value

plot_predict(1)
```

@tbl-performance summarises model performances on the test set according to the number of days ahead.
As the number increases, the mean absolute error and mean squared error becomes larger.
However, the increasing speed slows down, and the MAE and MSE converges, since the residuals exhibits stationary.

```{r}
#| label: tbl-performance
#| tbl-cap: Model Performance

gas_demand_test %>%
  dplyr::mutate(
    dplyr::across(
      "1":"7",
      \(.) . - log(GasDemand))) %>%
  dplyr::select("1":"7") %>%
  tidyr::pivot_longer(
    cols = tidyr::everything(),
    names_to = "Days Ahead") %>%
  dplyr::summarise(
    MAE = mean(abs(value), na.rm = TRUE),
    MSE = mean(value ^ 2, na.rm = TRUE),
    .by = `Days Ahead`)
```

To further evaluate the prediction accuracy, the prediction intervals were calculated through bootstrap methods.

@fig-interval displays the 95% prediction intervals according to the number of days ahead.
The width of the interval increases as the number becomes larger, but then converges.

```{r}
#| label: fig-interval
#| fig-cap: Plots of Prediction Intervals
#| fig-width: 7.0866
#| fig-height: 6.5697

lapply(
  1:6,
  FUN = . %>% plot_interval()) -> ps
cowplot::plot_grid(
  plotlist = ps,
  ncol = 2,
  align = "hv")
```

@tbl-interval shows that the 95% prediction intervals fail to cover 95% of the true values, with the coverages between 83.6% and 94.0%.

```{r}
#| label: tbl-interval
#| tbl-cap: 95% Prediction Interval Coverage

m <- prediction_intervals
colnames(m) <- c("Days Ahead", "Coverage")

for (i in 1:7) {
  m[[i, 1]] <- i
  m[[i, 2]] <-
    mean(
      gas_demand_test[[as.character(i)]] + prediction_intervals[[i, 1]] <
        gas_demand_test$GasDemand %>% log()
      & gas_demand_test$GasDemand %>% log() <
        gas_demand_test[[as.character(i)]] + prediction_intervals[[i, 2]],
      na.rm = TRUE)
}

m %>% as.data.frame()
```

# Conclusions {#sec-conclusion}

Natural gas demand can be affected by multiple factors, including temperature, wind speeds, holidays, and seasons.
This study provides a modelling approach using GAM and ARIMA models to predict the trend of natural gas demand from several days ahead.
Also, the prediction accuracy has been evaluated by estimating the prediction intervals.
The study hence reveals that the increments in number of days ahead and the quantity of natural gas demand can increase forecast uncertainty.

The GAM and ARIMA model used in this study captured the non-linear relationship between explanatory variables and response variable well, and produced reasonable results that fit the model assumptions.
It provides plausible short-term forecasts that can be potentially used in natural gas transmission and distribution.
However, there lacks comparison and selection between different models. Also, the prediction intervals do not perform well for longer forecasts, which might be due to uncaptured variance.
The future research could introduce more variables, more interaction terms, or different models, and evaluate model performance to compare these models, so that long-term forecasts could be more accurate.

\newpage

# Reference {.unnumbered}

::: {#refs}
:::
