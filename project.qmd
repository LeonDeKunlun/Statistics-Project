---
title: Short-term Gas Demand Foreacsting
author:
  name: ""
format:
  pdf:
    output-ext: pdf
toc: true
toc-title: Contents
number-sections: true
fontsize: 12pt
linestretch: 1
execute:
  echo: false
  warning: false
fig-align: center
output-file: Project68
editor_options:
  chunk_output_type: console
---

\newpage

```{r, results='hide'}
# load packages
library(tidyverse)
library(gamlss)
```

```{r, results='hide'}
# set locale
sys_locale <- "en_GB.utf8"
Sys.setlocale(locale = sys_locale)

options(lubridate.week.start = 1)
weekends <-
  lubridate::make_date(day = 3:4) %>%
  lubridate::wday(label = TRUE)

# set plot theme
size_param <- ggplot2::.stroke / ggplot2::.pt
ggplot2::theme_set(
  new =
    ggplot2::theme_minimal(
      base_size = 12,
      base_line_size = 0.5 * size_param,
      base_rect_size = 0.5 * size_param) +
    ggplot2::theme(
      axis.line = ggplot2::theme_classic()$axis.line))
purrr::iwalk(
  list(
    "point" = list(size = 1 * size_param, stroke = 0.5),
    "line" = list(linewidth = 0.5 * size_param),
    "text" = list(size = 12 / ggplot2::.pt, lineheight = 1),
    "boxplot" = list(linewidth = 0.5 * size_param),
    "violin" = list(linewidth = 0.5 * size_param),
    "smooth" = list(linewidth = 0.75 * size_param)),
  \(x, idx) ggplot2::update_geom_defaults(geom = idx, new = x))
```

# Introduction

Natural gas is an important resource across the world.

# Methodologies

# Data Analysis

# Conclusion

```{r}
# read the data
gas_demand <-
  utils::read.csv(
    file = "Scotland_Gas_Demand_and_CWV_01-01-2021_31-12-2024.csv",
    check.names = FALSE) %>%
  dplyr::mutate(
    `Gas Day` = `Applicable For` %>% as.Date(format = "%d/%m/%Y"),
    `Data Item` =
      `Data Item` %>%
      dplyr::case_match(
        "Demand Actual, LDZ (SC), D+6" ~ "Gas Demand",
        "Composite Weather Variable, Actual, LDZ(SC), D+1" ~
          "Composite Weather Variable"),
    `Quality Indicator` =
      `Quality Indicator` %>%
      dplyr::case_match(
        "A" ~ "Amended",
        "L" ~ "Late",
        .default = `Quality Indicator`) %>%
      factor(levels = c("", "Late", "Amended"))) %>%
  dplyr::select(`Gas Day`, `Data Item`, Value, `Quality Indicator`)
```

```{r}
# fetch public holiday data
holidays <-
  jsonlite::fromJSON(
    txt = "https://www.gov.uk/bank-holidays.json"
  )$scotland$events %>%
  dplyr::mutate(
    Date = date %>% as.Date(format = "%Y-%m-%d"),
    Holiday = title %>% stringr::str_remove(pattern = " \\(.*\\)"),
    .keep = "none")
```

```{r}
quality_colour <- c("grey", "Amended" = "red", "Late" = "orange")

plot_item_vs_time <- function(item) {
  gas_demand %>%
    dplyr::filter(`Data Item` == item) %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = `Gas Day`,
        y = Value,
        colour = `Quality Indicator`)) +
    ggplot2::scale_colour_manual(values = quality_colour) +
    ggplot2::geom_point(size = 0.75 * size_param) +
    ggplot2::labs(
      title = paste(item, "vs Gas Day"),
      y = item)
}

plot_item_vs_quality <- function(item) {
  gas_demand %>%
    dplyr::filter(`Data Item` == item) %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = `Quality Indicator`,
        y = Value,
        colour = `Quality Indicator`)) +
    ggplot2::scale_colour_manual(values = quality_colour) +
    ggplot2::geom_boxplot(
      outliers = FALSE,
      varwidth = TRUE) +
    ggplot2::geom_violin(
      mapping = ggplot2::aes(
        fill = ggplot2::after_scale(colour)),
      data = . %>% dplyr::filter(`Quality Indicator` == ""),
      alpha = 0.38,
      show.legend = FALSE) +
    ggplot2::geom_dotplot(
      mapping = ggplot2::aes(
        fill = ggplot2::after_scale(colour)),
      data = . %>% dplyr::filter(`Quality Indicator` != ""),
      alpha = 0.38,
      binaxis = "y",
      stackdir = "center",
      dotsize = 0.5) +
    ggplot2::labs(
      title = paste(item, "vs Quality Indicator"),
      y = item)
}
```

```{r}
plot_item_vs_time("Gas Demand")
```

```{r}
plot_item_vs_quality("Gas Demand")
```

```{r}
plot_item_vs_time("Composite Weather Variable")
```

```{r}
plot_item_vs_quality("Composite Weather Variable")
```

```{r}
gas_demand_wide <-
  gas_demand %>%
  # remove outliers
  dplyr::mutate(
    Value =
      dplyr::case_when(
        `Data Item` == "Gas Demand" & `Quality Indicator` == "Amended" ~ NA,
        `Data Item` == "Gas Demand" & Value == 5.4 ~ NA,
        .default = Value)) %>%
  # transform the data frame
  tidyr::pivot_wider(
    id_cols = `Gas Day`,
    names_from = `Data Item`,
    values_from = Value) %>%
  # order the data by Date
  dplyr::arrange(`Gas Day`) %>%
  # add day of the week
  dplyr::mutate(
    `Day of the Week` = `Gas Day` %>% lubridate::wday(label = TRUE)) %>%
  # add public holiday data
  dplyr::left_join(
    holidays,
    by = dplyr::join_by(`Gas Day` == Date),
    relationship = "one-to-one") %>%
  dplyr::mutate(
    Holiday =
      dplyr::case_when(
        !is.na(Holiday) ~ "Holiday",
        `Day of the Week` %in% weekends ~ "Holiday",
        .default = "None") %>%
      factor(levels = c("None", "Holiday")))
```


```{r}

```


```{r}
gas_demand_wide <-
  gas_demand_wide %>%
  dplyr::filter(`Gas Day` < lubridate::make_date(2024, 1, 1)) %>%
  stats::na.omit()
```


```{r}
weekday_colour = c()
names(weekday_colour) <- c()

create_plot <- function(data = gas_demand_wide, x, y) {
  data %>%
    ggplot2::ggplot(
      mapping = ggplot2::aes(
        x = {{ x }},
        y = {{ y }})) +
    ggplot2::labs(
      title = rlang::englue("{{ y }} vs {{ x }}"))
}
```

```{r}
create_plot(x = `Gas Day`, y = `Gas Demand`) +
  ggplot2::geom_line()
```

```{r}
create_plot(x = `Gas Day`, y = `Gas Demand`) +
  ggplot2::aes(
    colour = `Day of the Week`) +
  ggplot2::geom_point(stroke = 0) +
  ggplot2::geom_smooth(
    method = "loess",
    se = FALSE,
    span = 0.25)
```

```{r}
create_plot(x = `Gas Day`, y = `Composite Weather Variable`) +
  ggplot2::geom_line()
```

```{r}
create_plot(x = `Composite Weather Variable`, y = `Gas Demand`) +
  ggplot2::geom_point()
```

```{r}
create_plot(x = `Composite Weather Variable`, y = `Gas Demand`) +
  ggplot2::aes(
    colour = Holiday) +
  ggplot2::geom_point()
```

```{r}
merge_residuals <- function(model) {
  gas_demand_wide %>%
    stats::na.omit() %>%
    dplyr::mutate(
      Residual = model %>% stats::residuals()) %>%
    dplyr::select(`Gas Day`, Residual) %>%
    dplyr::right_join(
      gas_demand_wide,
      by = dplyr::join_by(`Gas Day`),
      relationship = "one-to-one")
}
```

```{r}
model <-
  stats::lm(
    formula = `Gas Demand` ~ `Composite Weather Variable` * Holiday,
    data = gas_demand_wide)

summary(model)

merge_residuals(model) %>%
  create_plot(x = `Gas Day`, y = Residual) +
  geom_line()
```

```{r}
model <-
  stats::lm(
    formula =
      `Gas Demand` ~
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)),
    data = gas_demand_wide)

summary(model)

merge_residuals(model) %>%
  create_plot(x = `Gas Day`, y = Residual) +
  geom_line()
```

```{r}
model <-
  stats::lm(
    formula =
      `Gas Demand` ~
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) * Holiday +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)) * Holiday,
    data = gas_demand_wide)

summary(model)

merge_residuals(model) %>%
  create_plot(x = `Gas Day`, y = Residual) +
  geom_line()
```

```{r}
model <-
  stats::lm(
    formula =
      `Gas Demand` ~
      `Composite Weather Variable` * Holiday +
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) * Holiday +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)) * Holiday,
    data = gas_demand_wide)
```

```{r}
model <-
  gamlss::gamlss(
    formula = `Gas Demand` ~ `Composite Weather Variable` * Holiday,
    sigma.formula =`Gas Demand` ~ `Composite Weather Variable` * Holiday,
    data = gas_demand_wide %>% stats::na.omit())
```

```{r}
model <-
  gamlss::gamlss(
    formula =
      `Gas Demand` ~
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) * Holiday +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)) * Holiday,
    sigma.formula =
      `Gas Demand` ~
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)) ,
    data = gas_demand_wide %>% stats::na.omit())

summary(model)

merge_residuals(model) %>%
  create_plot(x = `Gas Day`, y = Residual) +
  geom_line()
```

```{r}
model <-
  gamlss::gamlss(
    formula = `Gas Demand` ~ `Composite Weather Variable` * Holiday,
    sigma.formula =
      `Gas Demand` ~
      I(sin(2 * pi * unclass(`Gas Day`) / 365)) +
      I(cos(2 * pi * unclass(`Gas Day`) / 365)),
    data = gas_demand_wide %>% stats::na.omit())
```

```{r}
model.arma <- stats::arima(stats::residuals(model), order = c(1, 1, 1))

stats::acf(stats::residuals(model.arma))
stats::pacf(stats::residuals(model.arma))
```





